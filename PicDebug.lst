gplink-1.5.2 #1312 (Mar 29 2018)
Copyright (c) 1998-2016 gputils project
Listing File Generated: 23/04/18  20:58:25


Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                                             LIST     P = P12F629

                                                             INCLUDE  "../PIC_INCLUDE/P12F629.INC"
                                                   LIST
                                           
                                           ;==========================================================================
                                           ;  MPASM PIC12F629 processor include
                                           ; 
                                           ;  (c) Copyright 1999-2011 Microchip Technology, All rights reserved
                                           ;==========================================================================
                                           
                                                   NOLIST

002007   3f0c     addlw   0x0c                               __CONFIG _FOSC_INTRCIO & _WDT_ON & _PWRTE_ON & _MCLRE_OFF & _BOREN_OFF & _CP_ON & _CPD_OFF


                                           ;/***************************************************************************/
                                           ;/* PIC DEBUGGING    2018-04-22 V1.00 (C) Jason Birch                       */
                                           ;/*                                                                         */
                                           ;/* YouTube Video demonstrating this program can be found here:             */
                                           ;/* https://youtu.be/yuuGP2ic2B4                                            */
                                           ;/*                                                                         */
                                           ;/* Examples of debugging methods for PIC micro-controllers. This code can  */
                                           ;/* be loaded onto a PIC12F683, 8 pin device, and run. The code can be      */
                                           ;/* migrated to most other PIC micro-contollers, the main consideration     */
                                           ;/* when migrating being the banks used for RAM registers and names of the  */
                                           ;/* register bits.                                                          */
                                           ;/*                                                                         */
                                           ;/* 1. LED Flash Count: Periodically flash an LED on a single GPIO pin, to  */
                                           ;/*    indicate a status.                                                   */
                                           ;/*                                                                         */
                                           ;/* 2. Log data values into the EEPROM, so that later the PIC               */
                                           ;/*    micro-controller can be placed back into the PIC programmer and the  */
                                           ;/*    logged data values read back out to be analysed.                     */
                                           ;/*                                                                         */
                                           ;/* Code protection can be on, but for logging to EEPROM data protection    */
                                           ;/* needs to be off, so the data can be read back by the PIC programmer.    */
                                           ;/***************************************************************************/


                                           ;/*************/
                                           ;/* Constants */
                                           ;/*************/

                                           ; PORT A
                                           GPIO_LED          EQU      GP5                  ; On/Off LED.


                                           TIMER_0_SCALE     EQU      0x20


                                           ; LED_INFO
                                           LED_INFO_INDICATE EQU      1                    ; Flash at lease once so LED flash reporting shows it is working.
                                           LED_INFO_EVENT_1  EQU      2                    ; Each additional event can be a power of two so multi-events can be reported.
                                           LED_INFO_EVENT_2  EQU      4                    ; Or just a number of flashes can be used to report a more codes.
                                           LED_INFO_EVENT_3  EQU      8                    ; Up to 16 flashes is probably useable, more would probably be too many to count.



                                           ;/******************/
                                           ;/* RAM Registers. */
                                           ;/******************/
                                           CBLOCK            0x20
                                                             INT_W                         ; Temporary store for W during interupt.
                                                             INT_STATUS                    ; Temporary store for STATUS during interupt.

                                                             TMR0_SCALE_L                  ; Scale Timer 0 long engough for testing purposes.
                                                             TMR0_SCALE_H

                                                             LED_INFO                      ; Flag events to report as an LED flash code.
                                                             LED_FLASH_COUNT               ; Number of flashes remaining for current LED flash code.

                                                             LOG_DATA_POS                  ; Current position in the EEPROM log to save data.

                                                             TEST_DATA                     ; Test data for this example program.
                                           ENDC



                                                             CODE

                                           ;/**********************************/
                                           ;/* Reset program location vector. */
                                           ;/**********************************/
                                                             ORG      0x0000

000000   3020     movlw   0x20                               MOVLW    TIMER_0_SCALE
000001   00a3     movwf   0x23                               MOVWF    TMR0_SCALE_H
000002   01a2     clrf    0x22                               CLRF     TMR0_SCALE_L
000003   282e     goto    0x002e                             GOTO     INIT



                                           ;/*************************************/
                                           ;/* Interupt program location vector. */
                                           ;/*************************************/
                                                             ORG      0x0004

000004   00a0     movwf   0x20             INT_HANDLE        MOVWF    INT_W                ; Store registers from application during interupt.
000005   0803     movf    0x03, 0x0                          MOVFW    STATUS
000006   00a1     movwf   0x21                               MOVWF    INT_STATUS

000007   1283     bcf     0x03, 0x5                          BCF      STATUS, RP0          ; Select Register bank 0


000008   1d0b     btfss   0x0b, 0x2                          BTFSS    INTCON, T0IF         ; Did a TIMER0 interupt trigger?
000009   281b     goto    0x001b                             GOTO     INT_TIMER0_END       ; TIMER0: Test harness code.

00000a   0ba2     decfsz  0x22, 0x1                          DECFSZ   TMR0_SCALE_L         ; Scale timer 0.
00000b   281a     goto    0x001a                             GOTO     TIMER_0_END
00000c   0ba3     decfsz  0x23, 0x1                          DECFSZ   TMR0_SCALE_H
00000d   281a     goto    0x001a                             GOTO     TIMER_0_END
00000e   3020     movlw   0x20                               MOVLW    TIMER_0_SCALE
00000f   00a3     movwf   0x23                               MOVWF    TMR0_SCALE_H

000010   3001     movlw   0x01                               MOVLW    LED_INFO_INDICATE    ; Flash LED at least once, to show LED flash indicator is working.
000011   04a4     iorwf   0x24, 0x1                          IORWF    LED_INFO, F

000012   1c27     btfss   0x27, 0x0                          BTFSS    TEST_DATA, 0         ; Every other flash code shows event 1 example.
000013   2816     goto    0x0016                             GOTO     FLASH_CODE

000014   3002     movlw   0x02                               MOVLW    LED_INFO_EVENT_1     ; Add event 1 example to LED flash count.
000015   04a4     iorwf   0x24, 0x1                          IORWF    LED_INFO, F

000016   2043     call    0x0043           FLASH_CODE        CALL     LED_FLASH_CODE       ; Start flash indicator.

000017   0827     movf    0x27, 0x0                          MOVFW    TEST_DATA            ; Write test data to data log.
000018   204a     call    0x004a                             CALL     LOG_DATA
000019   0aa7     incf    0x27, 0x1                          INCF     TEST_DATA            ; On the next cycle write a data value one higher as a demonstration.

00001a   110b     bcf     0x0b, 0x2        TIMER_0_END       BCF      INTCON, T0IF         ; End of timer 0 interupt.


00001b   1c0c     btfss   0x0c, 0x0        INT_TIMER0_END    BTFSS    PIR1, TMR1IF         ; Did a TIMER1 interupt trigger?
00001c   2827     goto    0x0027                             GOTO     INT_TIMER1_END       ; TIMER1: Flash LED indicator the required indicator count.

00001d   08a5     movf    0x25, 0x1                          MOVF     LED_FLASH_COUNT, F   ; Are any more flashes required?
00001e   1903     btfsc   0x03, 0x2                          BTFSC    STATUS, Z
00001f   2826     goto    0x0026                             GOTO     TMR1_FLASH_END
000020   1e85     btfss   0x05, 0x5                          BTFSS    GPIO, GPIO_LED       ; Toggle the LED state between On and Off.
000021   2825     goto    0x0025                             GOTO     FLASH_LED_ON
000022   1285     bcf     0x05, 0x5                          BCF      GPIO, GPIO_LED       ; Switch LED Off.
000023   03a5     decf    0x25, 0x1                          DECF     LED_FLASH_COUNT      ; Reduce the remaining flash count when LED is switched Off.
000024   2826     goto    0x0026                             GOTO     TMR1_FLASH_END
000025   1685     bsf     0x05, 0x5        FLASH_LED_ON      BSF      GPIO, GPIO_LED       ; Switch LED On.

000026   100c     bcf     0x0c, 0x0        TMR1_FLASH_END    BCF      PIR1, TMR1IF         ; End of timer 1 interupt.


000027   0821     movf    0x21, 0x0        INT_TIMER1_END    MOVFW    INT_STATUS           ; Restore registers for application to continue.
000028   0083     movwf   0x03                               MOVWF    STATUS
000029   0820     movf    0x20, 0x0                          MOVFW    INT_W
00002a   1503     bsf     0x03, 0x2                          BSF      STATUS, Z
00002b   1d21     btfss   0x21, 0x2                          BTFSS    INT_STATUS, Z
00002c   1103     bcf     0x03, 0x2                          BCF      STATUS, Z
00002d   0009     retfie                                     RETFIE




00002e   0185     clrf    0x05             INIT              CLRF     GPIO                 ; Clear GPIO Port.

00002f   1683     bsf     0x03, 0x5                          BSF      STATUS, RP0          ; Select Register bank 1

000030   30df     movlw   0xdf                               MOVLW    ~(1 << GPIO_LED)     ; Set all pins to input except LED.
000031   0085     movwf   0x05                               MOVWF    TRISIO

000032   300f     movlw   0x0f                               MOVLW    (1 << PSA)|(1 << PS0)|(1 << PS1)|(1 << PS2)
000033   0081     movwf   0x01                               MOVWF    OPTION_REG           ; Prescale watchdog timer.

000034   3001     movlw   0x01                               MOVLW    (1 << T1IE)          ; Interupt on Timer 1 for LED indicator.
000035   008c     movwf   0x0c                               MOVWF    PIE1

000036   1283     bcf     0x03, 0x5                          BCF      STATUS, RP0          ; Select Register bank 0

000037   0181     clrf    0x01                               CLRF     TMR0                 ; Start with full period for Timer 0.

000038   30e0     movlw   0xe0                               MOVLW    (1 << GIE)|(1 << PEIE)|(1 << T0IE) ; Enable interupts.
000039   008b     movwf   0x0b                               MOVWF    INTCON               ; Configure timer 0 interupts and enable interupts.
00003a   018c     clrf    0x0c                               CLRF     PIR1                 ; Clear interupt flags.

00003b   3025     movlw   0x25                               MOVLW    (1 << TMR1ON)|(1 << NOT_T1SYNC)|(1 << T1CKPS1)
00003c   0090     movwf   0x10                               MOVWF    T1CON                ; Configure timer 1.

00003d   01a4     clrf    0x24                               CLRF     LED_INFO             ; Ensure no LED info to display at start up.
00003e   01a5     clrf    0x25                               CLRF     LED_FLASH_COUNT
00003f   01a6     clrf    0x26                               CLRF     LOG_DATA_POS         ; Start logging data from start of data log at start up.

000040   01a7     clrf    0x27                               CLRF     TEST_DATA            ; Reset test data, used for testing EEPROM log.

000041   0064     clrwdt                   LOOP              CLRWDT                        ; Tell CPU application still running.
000042   2841     goto    0x0041                             GOTO     LOOP                 ; Infinite main loop.



000043   1285     bcf     0x05, 0x5        LED_FLASH_CODE    BCF      GPIO, GPIO_LED       ; Turn off LED to indicate update type with flash count.
000044   018e     clrf    0x0e                               CLRF     TMR1L                ; Ensure a full flash period is applied for first flash.
000045   018f     clrf    0x0f                               CLRF     TMR1H
000046   0824     movf    0x24, 0x0                          MOVFW    LED_INFO             ; Flash the currently set flash count.
000047   00a5     movwf   0x25                               MOVWF    LED_FLASH_COUNT
000048   01a4     clrf    0x24                               CLRF     LED_INFO             ; Clear the flash indicator ready for the next value to be set.
000049   0008     return                                     RETURN



00004a   1683     bsf     0x03, 0x5        LOG_DATA          BSF      STATUS, RP0          ; Select Register bank 1.
00004b   009a     movwf   0x1a                               MOVWF    EEDATA               ; Set data to write to data log.
00004c   3006     movlw   0x06                               MOVLW    DATA_LOG_START       ; Start of data log EEPROM Address.
00004d   0726     addwf   0x26, 0x0                          ADDWF    LOG_DATA_POS, W      ; Add the current address offset to write to.
00004e   009b     movwf   0x1b                               MOVWF    EEADR                ; Set the EEPROM address to write to.
00004f   089b     movf    0x1b, 0x1                          MOVF     EEADR, F
000050   1903     btfsc   0x03, 0x2                          BTFSC    STATUS, Z            ; Make sure EEPROM address does not wrap and overwrite beginning of EEPROM.
000051   285e     goto    0x005e                             GOTO     LOG_DATA_END         ; For 128 byte EEPROM, EEADR is 7 bits, for 256 byte EEADR is 8 bits.
000052   151c     bsf     0x1c, 0x2                          BSF      EECON1, WREN         ; Enable writes to EEPROM.
000053   138b     bcf     0x0b, 0x7                          BCF      INTCON, GIE          ; Disable interupts.
000054   3055     movlw   0x55                               MOVLW    0x55                 ; Unlock write with required code sequence.
000055   009d     movwf   0x1d                               MOVWF    EECON2
000056   30aa     movlw   0xaa                               MOVLW    0xAA
000057   009d     movwf   0x1d                               MOVWF    EECON2
000058   149c     bsf     0x1c, 0x1                          BSF      EECON1, WR           ; Start EEPROM write.
000059   178b     bsf     0x0b, 0x7                          BSF      INTCON, GIE          ; Enable interupts.
00005a   189c     btfsc   0x1c, 0x1        EEPROM_WRITE_WAIT BTFSC    EECON1, WR           ; Wait for EEPROM write to complete.
00005b   285a     goto    0x005a                             GOTO     EEPROM_WRITE_WAIT
00005c   111c     bcf     0x1c, 0x2                          BCF      EECON1, WREN         ; Disable additional writes to EEPROM.
00005d   0aa6     incf    0x26, 0x1                          INCF     LOG_DATA_POS         ; Point to next data log address for next time data is logged.
00005e   1283     bcf     0x03, 0x5        LOG_DATA_END      BCF      STATUS, RP0          ; Select Register bank 0
00005f   0008     return                                     RETURN



                                           ;/*************************/
                                           ;/* Write data to EEPROM. */
                                           ;/*************************/
                                                             ORG      0x2100

                                           EEPROM_MEMORY
002100   0000     nop                                        DE       0x00                 ; Example program data.
002101   0000     nop                                        DE       0x00                 ; Example program data.
002102   0000     nop                                        DE       0x00                 ; Example program data.
002103   0000     nop                                        DE       0x00                 ; Example program data.
002104   00aa     movwf   0x2a             DATA_LOG_ID       DE       0xAA                 ; Two bytes to identify start of logged data when analyzing.
002105   0055     dw      0x0055                             DE       0x55
002106   00ff     movwf   0x7f             DATA_LOG_START    DE       0xFF                 ; Place holder reference for start of data logging area.


                                                             END

